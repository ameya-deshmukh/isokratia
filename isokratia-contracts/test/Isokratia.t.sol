// SPDX-License-Identifier: UNLICENSED
pragma solidity ^0.8.13;

import "forge-std/Test.sol";
import "../src/Isokratia.sol";

contract ContractTest is Test {


    uint256[][][] NEGALFA1XBETA2 = [
        [
        [
            4063420080633,
            6555003798509,
            3528875089017,
            5800537096256,
            8041381108016,
            203518374640
        ],
        [
            7676269984398,
            1145806392863,
            6738515895690,
            5144301275423,
            8547057760405,
            353834589854
        ]
        ],
        [
        [
            5712635615088,
            8763475698695,
            7480760495871,
            1630925336586,
            5902994417779,
            229051200835
        ],
        [
            1066113280330,
            5452941452156,
            130670027992,
            6364438679415,
            8227984268724,
            117895881848
        ]
        ],
        [
        [
            2720638156466,
            8183746692879,
            2805734624200,
            4541538633192,
            1476702149455,
            162434980571
        ],
        [
            4093955238700,
            4839352246179,
            5773319594517,
            5269728708172,
            8404179905859,
            4522318692
        ]
        ],
        [
        [
            7907150524416,
            8555524456643,
            2425990496019,
            5117607179458,
            886559720121,
            343845114320
        ],
        [
            3348806304058,
            5295378168489,
            5426585403009,
            4313512356362,
            2882006508456,
            312905790371
        ]
        ],
        [
        [
            6984987484510,
            4411212100320,
            517962775393,
            5578757090043,
            1344911245314,
            115782940661
        ],
        [
            4257694794763,
            5641455412912,
            2987387394488,
            6147130513016,
            8766894161060,
            7451503335
        ]
        ],
        [
        [
            3338043330865,
            3023333978926,
            4787719622265,
            3729967781503,
            2489094582823,
            396043239802
        ],
        [
            3390886416082,
            169102433935,
            2279828268438,
            1618451670976,
            7055320302964,
            48334526481
        ]
        ]
    ];

    uint256[][][] GAMMA2 = [
    [
        [
            5896345417453,
            4240670514135,
            6172078461917,
            219834884668,
            2138480846496,
            206187650596
        ],
        [
            6286472319682,
            5759053266064,
            8549822680278,
            8639745994386,
            912741836299,
            219532437284
        ]
        ],
        [
        [
            4404069170602,
            525855202521,
            8311963231281,
            825823174727,
            854139906743,
            161342114743
        ],
        [
            3147424765787,
            7086132606363,
            7632907980226,
            5320198199754,
            6592898451945,
            77528801456
        ]
        ]
    ];

    uint256[][][] DELTA2 = [
    [
        [
            7729836325927,
            8517956451685,
            4033364554740,
            4001789754505,
            7653645210298,
            354447782510
        ],
        [
            1388103822577,
            8404010102298,
            856053778201,
            3507911936631,
            8206162100929,
            113445856491
        ]
        ],
        [
        [
            8793217999691,
            7106301969696,
            7718490619722,
            7819179045430,
            4590999760248,
            24605411388
        ],
        [
            5042627280266,
            157842999214,
            5958854182355,
            950781649488,
            8416741364710,
            180571071519
        ]
        ]
    ];

    uint256[][][] IC = [
        [
        [
            1305955898557,
            3221302193155,
            3753836914638,
            7483109180474,
            113006122330,
            47417911287
        ],
        [
            2759575456530,
            474829102102,
            6863269531525,
            3805895321977,
            5414803739806,
            277837986502
        ]
        ],
        [
        [
            3369381598324,
            6418327256523,
            4972793884908,
            1416394741695,
            1069284332536,
            390341521
        ],
        [
            3118450096748,
            1714056947546,
            2837809434155,
            97863249691,
            2733156090833,
            218341954120
        ]
        ]
    ];

    Isokratia isokratia;

    function setUp() public {
        uint256[6][2][6] memory _negalfa1xbeta2;
        for (uint i = 0;i < 6;i++) {
            for (uint j = 0;j < 2;j++) {
                for (uint k = 0;k < 6;k++) {
                    _negalfa1xbeta2[i][j][k] = NEGALFA1XBETA2[i][j][k];
                }
            }
        }

        uint256[6][2][2] memory _gamma2;
        for (uint i = 0;i < 2;i++) {
            for (uint j = 0;j < 2;j++) {
                for (uint k = 0;k < 6;k++) {
                    _gamma2[i][j][k] = GAMMA2[i][j][k];
                }
            }
        }

        uint256[6][2][2] memory _delta2;
        for (uint i = 0;i < 2;i++) {
            for (uint j = 0;j < 2;j++) {
                for (uint k = 0;k < 6;k++) {
                    _delta2[i][j][k] = DELTA2[i][j][k];
                }
            }
        }

        uint256[6][2][2] memory _ic;
        for (uint i = 0;i < 2;i++) {
            for (uint j = 0;j < 2;j++) {
                for (uint k = 0;k < 6;k++) {
                    _ic[i][j][k] = IC[i][j][k];
                }
            }
        }
        isokratia = new Isokratia(
            _negalfa1xbeta2,
            _gamma2,
            _delta2,
            _ic
        );
    }

    uint64[4][] _options;
    string[] _optionText;
    uint256[2] _a;
    uint256[2][2] _b;
    uint256[2] _c;
    uint256[1] _input;

    /* 
    [
    "0x11baa61b1da261be30df83a64e30b531bb6834372f7ae0b40ce934e007639fc4",
    "0x1c072409cb5bf579170848718d5a6df66f5e9eaa5486088696a1131027dc009e"
  ],
  [
    [
      "0x1357df0394211d76fd839785ea6092b6af84013b505c421ad8147d1764cbedb5",
      "0x0ba17198b4da5ab8b752c71f4b10d7ecc991440758dd064ab50e31c8997c1d68"
    ],
    [
      "0x26ba6cc940672ddcfc5e59adb6b6c9519507702b20e3459d5a2e926661e2c08f",
      "0x2eb00257635ce1312027d4c0fb69038c3b40e2d21ae49f20325b30711d42d855"
    ]
  ],
  [
    "0x037f28c5984683c10d6dc90377b90925b85adead62317e5e57b6ca3150d4e989",
    "0x0a621776d0fbbd79c35317173b4f521add7e1dbc7467c3de9b97e39cbf251e8c"
  ],
  [
    "0x1cfd215abf3ecc9b246207cebbe2c8bd1c8ad4a3cd19ee6c3f41c97c0b2a2dcf"
  ]
    */


    function testFlow() public {
        _options.push([6245642652743125481, 3101373935687845800, 1748451034013447512, 12613057489227889884]);
        _options.push([9010510721521564763, 6991613417003311714, 14997001407434824448, 13306855292224131118]);
        _optionText.push("Yes");
        _optionText.push("No");
        isokratia.createProposal(35,
            7375973,
            18812586667611147222983163006546754153040663896785594427558828361574221715663,
            _options,
            _optionText
        );

        _a[0] = 0x0211081741217172fa54a6a0b373eecc517f6b1f81cb28d28aa725f393a8c307;
        _a[1] = 0x1063c5044fd2deddcf9836a282c0c31ebb4b71ae49bc89b9008fce96730cb31e;
        _b[0][0] = 0x296bba85ffa4da38eda708c970595c72fdc879fed0ab016930793269eb59793e;
        _b[0][1] = 0x06d6af6b93ff6d0c432757817628a3e034e91fe50299cf2774fe1ea515ae1325;
        _b[1][0] = 0x137e15e65a82495a8a65c350c822a6288630659548f7dcd0c5b39dc8fc028bf9;
        _b[1][1] = 0x2a5934f9f0c361cc03d8ae39fcdcc487a81768cc8a2563603ad90ba3f613d56a;
        _c[0] = 0x0867e24e1b0d46653150e684369b81b4f22af5036bdd85396b6c07c07ed94ed9;
        _c[1] = 0x17dcaa8917eb6676fd08b07e1f976baaeed4107077255af7f3b2537cc35018c3;
        _input[0] = 0x00b381287084a77c97d5be95f5c9741914440e0656cfdee1cf00050f98a3fc92;

        isokratia.postAggregation(
            35,
            "Yes",
            1,
            3229823353917200201071081337758342217310743602957200225342297391115753930820,
            _a,
            _b,
            _c,
            _input
        );


        assertTrue(true);
    }

    // function testSha() public {
    //     _options.push([6245642652743125481, 3101373935687845800, 1748451034013447512, 12613057489227889884]);
    //     _options.push([9010510721521564763, 6991613417003311714, 14997001407434824448, 13306855292224131118]);
    //     _optionText.push("Yes");
    //     _optionText.push("No");
    //     isokratia.createProposal(35,
    //         7375973,
    //         18812586667611147222983163006546754153040663896785594427558828361574221715663,
    //         _options,
    //         _optionText
    //     );

    //     uint256 hash = isokratia.tester();
    //     assertEq(1, hash);
    // }
}
